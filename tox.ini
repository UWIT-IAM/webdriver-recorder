[tox]
envlist = clean,\
          # autoformats code -- because of this,
          # you shouldn't use "tox" without "-e" IF you are running
          # in a context where the result won't be committed. Instead you
          # should use the "black_check" env which checks that the
          black,\
          # Run in two modes locally
          local_default,local_disable_session_browser,
          # Run inside docker
          docker_compose,
          # Ensure our executable works right
          run_report_export,
          # Ensure coverage and pep8
          validate_coverage,flake8
# isolated_build = True is required because poetry already creates the env.
# This doesn't mean "isolate this build," it means "the build is already isolated"
isolated_build = True
# Don't install the plugin, because it's harder to track coverage
skip_install = True

[pytest]
testpaths = tests


[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.\.debug

    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main_.:

[testenv]
setenv =
    test_dir = {toxinidir}/tests
    REPORT_DIR = {toxinidir}/webdriver-report

[testenv:bootstrap]
allowlist_externals = poetry

commands = poetry install --no-interaction --no-root
           ./bootstrap_chromedriver.sh


[testenv:local_default]
allowlist_externals = pytest
                      coverage
commands = coverage run -a --source=webdriver_recorder -m pytest -o log_cli=true -o log_cli_level=warning tests/
           coverage report -m


[testenv:local_disable_session_browser]
allowlist_externals = pytest
                      coverage
setenv =
    disable_session_browser = true
    test_dir = {toxinidir}/tests
    REPORT_DIR = {toxinidir}/webdriver-report

commands = coverage run -a --source=webdriver_recorder -m pytest -o log_cli=true -o log_cli_level=warning tests/
           coverage report -m

[testenv:docker_compose]
allowlist_externals = docker-compose
commands = docker-compose up --build --exit-code-from test-runner

[testenv:run_report_export]
allowlist_externals = coverage

commands = coverage run -a --source=webdriver_recorder \
           -m webdriver_recorder.export-report \
           -i {env:REPORT_DIR}/report.json

[testenv:validate_coverage]
allowlist_externals = coverage
commands = coverage html
           coverage report --fail-under 100 -m

[testenv:clean]
allowlist_externals = coverage
                     rm
commands = coverage erase
           rm -fv {env:REPORT_DIR}/worker.*

[testenv:flake8]
allowlist_externals = flake8
commands = flake8 {toxinidir}/webdriver_recorder

[testenv:black]
allowlist_externals = black
commands =  black {toxinidir}/webdriver_recorder {toxinidir}/tests --line-length 119

[testenv:black_check]
allowlist_externals = black
commands =  black {toxinidir}/webdriver_recorder {toxinidir}/tests --line-length 119 --check

[testenv:dump_strict_envs]
allowlist_externals = tox
                      sed
                      paste

commands: tox -l | sed '/^\\$/d' | sed 's|black|black_check|g' | paste -sd "," -

[flake8]
max-line-length = 119
